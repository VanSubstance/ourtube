<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">
<mapper
	namespace = "com.my.spring.mapper.BasicMapper">
	<!-- 당일 기준 동영상 게시일이 70일(10주)가 넘어가는 동영상 id들 삭제 -->
	<delete id="deleteOldDatas">
		<![CDATA[
		delete from video
		where publisheddate < TO_DATE(SYSDATE - 70, 'YY/MM/DD')
		]]>
	</delete>

	<select id="getGameQ" resultType="String">
		select Q from gamesearch 
		where q is not null 
		and title not in (
			select title from gameStatistics
			where infodate = TO_DATE(SYSDATE, ('YY/MM/DD'))
		)
	</select>
	<select id="getTitleByQ" parameterType="String" resultType="String">
		select title from gamesearch where q = #{q}
	</select>
	<select id="getAllTitle" resultType="String">
		select title from gamesearch where q is not null
	</select>
	<insert id="setGame" parameterType="com.my.spring.domain.basics.Game">
		insert into game (title, thumbnail) 
		values (#{item.title}, #{item.thumbnail})
	</insert>
	<insert id="setGameInGameSearch" parameterType="String">
		insert into gamesearch (title)
		values (#{title})
	</insert>
	<insert id="setGameTopic" parameterType="com.my.spring.domain.chains.GameTopic">
		insert into gametopic (title, topic) 
		values (#{item.title}, #{item.topic})
	</insert>
	<insert id="setGameStat" parameterType="com.my.spring.domain.statistics.GameStatistic">
		insert into gamestatistics (title, infoDate, resultcount)
		values (#{item.title}, #{item.infoDate}, #{item.resultCount})
	</insert>
	<update id="setOurScoreForGameToday" parameterType="map">
		update gamestatistics
		set ourScore = #{score}, rank = #{rank}
		where infodate = TO_DATE(SYSDATE, 'YY/MM/DD') and title = #{title}
	</update>
	<select id="getTopics" resultType="com.my.spring.domain.TopicDto">
		select * from topictotal
	</select>
	<select id="getNounFilter" resultType="String">
		select * from nounFilter
	</select>

	<select id="getTopicsByTopic" parameterType="String" resultType="String">
		select topic2 topic from (
		    select topic1, topic2, count(*) hardness from (
		        select a.topic topic1, b.topic topic2 from gametopic a, gametopic b
		        where a.title = b.title and a.topic != b.topic
		    ) 
		group by topic1, topic2
		)
		where topic1 = #{topic}
		order by hardness desc
	</select>
	
	<select id="getGameListForToday" resultType="com.my.spring.domain.statistics.GameStatistic">
		select * from gameStatistics
		where infodate = TO_DATE(SYSDATE, ('YY/MM/DD'))
	</select>
	
	<select id="getGamesByTopic" parameterType="String" resultType="com.my.spring.domain.basics.Game">
		<![CDATA[
		select * from game a, (
		    select rownum ind, title from (
		        select * from gamestatistics b
		        where 
		        b.title in (
		            select title from gametopic where topic = #{topic}
		        ) 
		        and infodate = TO_DATE(SYSDATE, 'YY/MM/DD')
		        order by b.rank asc
		        ) where ROWNUM <= 10
		    ) b
	    where a.title = b.title
	    order by b.ind
		]]>
	</select>
	
	<select id="getGameDataForMainByGame" parameterType="String" resultType="com.my.spring.domain.statistics.GameDataForMain">
		select b.*, d.resultcount, d.ourscore, d.rank from (
			    select 
			    a.infodate,
			    round(sum(a.viewcount)) viewcount, 
			    round(sum(a.likecount)) likecount, 
			    round(sum(a.dislikecount)) dislikecount, 
			    round(sum(a.commentcount)) commentcount from videostatistics a
			    where id in (
			        select id from videogame c
			        where c.game = #{title}
			        )
			    group by a.infodate
			    order by a.infodate desc) b
			inner join (
	            select * from gamestatistics d
			    ) d on d.title = #{title} and d.infodate = b.infodate
		union
		select b.*, d.resultcount, d.ourscore, d.rank from (
			    select 
			    a.infodate,
			    round(sum(a.viewcount)) viewcount, 
			    round(sum(a.likecount)) likecount, 
			    round(sum(a.dislikecount)) dislikecount, 
			    round(sum(a.commentcount)) commentcount from videostatistics a
			    where id in (
			        select id from videogame c
			        where c.game = #{title}
			        )
			    group by a.infodate
			    order by a.infodate desc) b
			inner join (
	            select * from gamestatistics d
			    ) d on d.title = #{title} and d.infodate = b.infodate
	</select>
	
	<!-- 날짜, 장르 ==> 평균 아울스코어, 검색량, 조회수, 좋아요, 싫어요  -->
	<select id="getTopicAvgStatuesByTopicAndDate" parameterType="map" resultType="com.my.spring.domain.statistics.TopicStatistic">
		select a.*, b.* from (
		    select round(avg(a.resultcount)) resultCount, avg(a.ourscore) ourScore from gamestatistics a, gametopic b
		    where a.title = b.title
		    and b.topic = #{topic}
		    and infodate = #{date}
		) a, (
		    select round(avg(a.viewcount)) viewCount, 
		    round(avg(a.likecount)) likeCount, 
		    round(avg(a.dislikecount)) dislikeCount 
		    from videostatistics a, gametopic b, videogame c
		    where b.topic = #{topic}
		    and b.title = c.game
		    and c.id = a.id
		    and a.infodate = #{date}
		) b
	</select>
	
	<select id="getIdCompleteById" parameterType="String" resultType="Int">
		select count(*) from idcomplete where id = #{id}
	</select>
	
	<insert id="setIdComplete" parameterType="com.my.spring.domain.IdComplete">
		insert into IdComplete (type, id)
		values (#{item.type}, #{item.id})
	</insert>
	
	<select id="getProfileChipByTitle" parameterType="String" resultType="com.my.spring.domain.GameProfileChip">
		select #{title} title, a.thumbnail, b.topic genre1 from game a, gametopic b
		where a.title = b.title
		and a.title = #{title}
	</select>
	
</mapper>